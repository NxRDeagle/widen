import { useContext } from "react";

import { mainContext } from "../../../App";

import { Conversion } from "../../../global_function/function";

//Компонент автора новостной ленты
export const AuthorNewsware = ({ full, userProfile, geoposition }) => {

    const { editMyProfile, myProfile, goToPreview, page } = useContext(mainContext);

    return (
        <>
            <div className={full ? "author_open_newsware_item" : "author_newsware_item"}>
                <img
                    className={full ? "avatar_author_newsware_open" : "avatar_author_newsware"}
                    loading='lazy'
                    src={userProfile.avatar}
                    alt="userAvatar"
                    onClick={() => goToPreview(userProfile)}
                />
                <div className="author_newsware_nick_box">
                    <p className="author_newsware_nickname" onClick={() => goToPreview(userProfile)}>
                        {userProfile.nickname}
                    </p>
                    <p className="geolocation">
                        <svg style={{ marginRight: '2px' }} xmlns="http://www.w3.org/2000/svg" width="8" height="11" viewBox="0 0 8 11" fill="none">
                            <path d="M4 5.24012C4.275 5.24012 4.5105 5.13742 4.7065 4.932C4.90217 4.72694 5 4.48031 5 4.1921C5 3.90389 4.90217 3.65708 4.7065 3.45167C4.5105 3.24661 4.275 3.14407 4 3.14407C3.725 3.14407 3.48967 3.24661 3.294 3.45167C3.098 3.65708 3 3.90389 3 4.1921C3 4.48031 3.098 4.72694 3.294 4.932C3.48967 5.13742 3.725 5.24012 4 5.24012ZM4 9.09161C5.01667 8.11346 5.77083 7.22473 6.2625 6.42544C6.75417 5.62649 7 4.91698 7 4.2969C7 3.34495 6.71033 2.56539 6.131 1.95823C5.552 1.35143 4.84167 1.04802 4 1.04802C3.15833 1.04802 2.44783 1.35143 1.8685 1.95823C1.2895 2.56539 1 3.34495 1 4.2969C1 4.91698 1.24583 5.62649 1.7375 6.42544C2.22917 7.22473 2.98333 8.11346 4 9.09161ZM4 10.2837C3.93333 10.2837 3.86667 10.2706 3.8 10.2444C3.73333 10.2182 3.675 10.1833 3.625 10.1396C2.40833 9.01301 1.5 7.96726 0.9 7.00238C0.3 6.03715 0 5.13532 0 4.2969C0 2.98687 0.402167 1.94321 1.2065 1.16593C2.0105 0.388642 2.94167 0 4 0C5.05833 0 5.9895 0.388642 6.7935 1.16593C7.59783 1.94321 8 2.98687 8 4.2969C8 5.13532 7.7 6.03715 7.1 7.00238C6.5 7.96726 5.59167 9.01301 4.375 10.1396C4.325 10.1833 4.26667 10.2182 4.2 10.2444C4.13333 10.2706 4.06667 10.2837 4 10.2837Z" fill="#888888" />
                        </svg>
                        {geoposition}
                    </p>
                </div>
                {
                    !page.includes('profile') && userProfile.userId !== myProfile.userId && (
                        <div onClick={() => editMyProfile(userProfile.userId, 'subcriptions')} className={myProfile.subscriptions.includes(userProfile.userId) ? 'remove_friend_box ' : 'add_friend_box'}>
                            {
                                myProfile.subscriptions.includes(userProfile.userId) ?
                                    (
                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="16" viewBox="0 0 18 16" fill="none">
                                            <path d="M13.5 3.11111C13.5 4.57048 12.3637 5.72222 11 5.72222C9.63627 5.72222 8.5 4.57048 8.5 3.11111C8.5 1.65174 9.63627 0.5 11 0.5C12.3637 0.5 13.5 1.65174 13.5 3.11111Z" stroke="black" />
                                            <path d="M8.5 13.9995H16.7681C17.2681 13.3081 18.2321 11.4069 16.5001 9.85135C15.4099 8.87221 12.6667 8.29579 11.5001 8.29579C10.3334 8.29579 7.7 8.6069 6.5 9.85135M5.5 6.74023L3 13.9995L1 10.8884" stroke="black" />
                                        </svg>
                                    )
                                    :
                                    (
                                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none">
                                            <path d="M12.6025 3C12.6025 4.3949 11.5088 5.5 10.1909 5.5C8.8729 5.5 7.77917 4.3949 7.77917 3C7.77917 1.6051 8.8729 0.5 10.1909 0.5C11.5088 0.5 12.6025 1.6051 12.6025 3Z" stroke="white" />
                                            <path d="M7.7645 13.5H15.7892C16.2745 12.8333 17.2101 11 15.5291 9.5C14.471 8.55583 11.8086 8 10.6763 8C9.54391 8 6.98805 8.3 5.82337 9.5M7.7645 11.5H3.88225M0 11.5H3.88225M3.88225 11.5V7M3.88225 11.5V16" stroke="white" />
                                        </svg>
                                    )
                            }
                        </div>
                    )
                }
            </div>
        </>
    )
}

//Карточка поста
export const PostCard = ({ newswareId, signImgs, imgs, full }) => {

    const { goToComments, page, goToFullMode } = useContext(mainContext);

    const PreviewText = Conversion('previewSign', signImgs[0]);

    return (
        <>
            <div className="post_card_box">
                {signImgs.length > 0 && (
                    <p className="post_card_text">
                        {page === 'comments' ? signImgs[0] : PreviewText.sign}
                        {PreviewText.large && page !== 'comments' ? (
                            <span onClick={() => goToComments(newswareId)} className="sign_wrap">
                                Развернуть
                            </span>
                        ) : null}
                    </p>
                )}
                {
                    imgs.length > 0 && (
                        <img
                            className="newsware_image"
                            loading='lazy'
                            src={imgs[0]}
                            alt="Newsware"
                            onClick={() => {
                                full ? goToFullMode(imgs, 0) : goToComments(newswareId);
                            }}
                        />
                    )
                }
                {
                    full && (
                        imgs.length > 0 &&
                        imgs.map((path, index) => {
                            if (index !== 0) {
                                return (
                                    <div key={index}>
                                        {signImgs[index] ? (
                                            <p className="post_card_text">{signImgs[index]}</p>
                                        ) : null}
                                        <img
                                            className="newsware_image"
                                            loading='lazy'
                                            src={path}
                                            alt="Newsware"
                                            onClick={() => goToFullMode(imgs, index)}
                                        />
                                    </div>
                                );
                            }
                        })
                    )
                }
            </div>
        </>
    )
}

//Карточка мероприятия
export const EventCard = ({ newswareId, signImgs, imgs, full }) => {

    const { goToComments, page, goToFullMode } = useContext(mainContext);

    const PreviewText = Conversion('previewSign', signImgs[0]);

    return (
        <>
            <div className="event_card_box">
                {signImgs.length > 0 && (
                    <p className="event_card_text">
                        {page === 'comments' ? signImgs[0] : PreviewText.sign}
                        {PreviewText.large && page !== 'comments' ? (
                            <span onClick={() => goToComments(newswareId)} className="sign_wrap">
                                Развернуть
                            </span>
                        ) : null}
                    </p>
                )}
                {
                    imgs.length > 0 && (
                        <img
                            className="newsware_image"
                            loading='lazy'
                            src={imgs[0]}
                            alt="Newsware"
                            onClick={() => {
                                full ? goToFullMode(imgs, 0) : goToComments(newswareId);
                            }}
                        />
                    )
                }
                {
                    full && (
                        imgs.length > 0 &&
                        imgs.map((path, index) => {
                            if (index !== 0) {
                                return (
                                    <div key={index}>
                                        {signImgs[index] ? (
                                            <p className="event_card_text">{signImgs[index]}</p>
                                        ) : null}
                                        <img
                                            className="newsware_image"
                                            loading='lazy'
                                            src={path}
                                            alt="Newsware"
                                            onClick={() => goToFullMode(imgs, index)}
                                        />
                                    </div>
                                );
                            }
                        })
                    )
                }
            </div>
        </>
    )
}

//Карточка Кейса
export const CaseCard = ({ userProfile, newswareId, signImgs, imgs, full }) => {

    const { goToComments, goToPreview } = useContext(mainContext);

    return (
        <>
            <div className="case_card_box">
                {
                    !full ?
                        (
                            <>
                                {
                                    imgs.length > 0 && (
                                        <img
                                            onClick={() => goToComments(newswareId)}
                                            className="case_image"
                                            loading='lazy'
                                            src={imgs[0]}
                                            alt="case"
                                        />
                                    )
                                }
                                {signImgs.length > 0 && (
                                    <p className="case_header">{signImgs[0]}</p>
                                )}
                                <img
                                    className="case_author_avatar"
                                    loading='lazy'
                                    src={userProfile.avatar}
                                    alt="user avatar"
                                    onClick={() => goToPreview(userProfile)}
                                />
                                <p className="case_author_nickname">{userProfile.nickname}</p>
                            </>
                        )
                        :
                        (
                            <div>Здесь я разврётан</div>
                        )
                }
            </div>
        </>
    )
}

//Компонент со всеми иконками новостной ленты
export const NewswareIcons = ({ full, stats, newswareStates, setNewswareStates }) => {

    //Количество каждого элемента статистики поста, кейса или мероприятия
    const statsCount = {};

    for (const key in stats) {
        statsCount[key] = Conversion('count', stats[key].length);
    }

    return (
        <>
            {newswareStates.activeLike &&
                !newswareStates.clickUseful &&
                setTimeout(() => {
                    setNewswareStates({ ...newswareStates, clickUseful: true });
                }, 2000) && (
                    <svg
                        className={newswareStates.isUseful ? 'useful is_useful' : 'useful not_useful'}
                        name="icon-useful"
                        width="165"
                        height="64"
                        viewBox="0 0 165 64"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                            name="icon-useful"
                            d="M29.9527 14.0526C7.13946 14.0526 1.21309 5.96328 1.00571 1.48383V37.9825C1.00571 57.1263 20.3037 62.6374 29.9527 63H136.931C146.16 62.2749 164.493 56.2561 163.99 37.9825C163.486 19.7088 145.741 14.4152 136.931 14.0526H29.9527Z"
                            fill={newswareStates.isUseful ? '#BABABA' : 'white'}
                        />
                        <path
                            name="icon-useful"
                            d="M29.9527 14.0526C53.6137 14.0526 111.13 14.0526 136.931 14.0526M29.9527 14.0526C7.13946 14.0526 1.21309 5.96328 1.00571 1.48383M29.9527 14.0526H136.931M136.931 14.0526C145.741 14.4152 163.486 19.7088 163.99 37.9825C164.493 56.2561 146.16 62.2749 136.931 63H29.9527C20.3037 62.6374 1.00571 57.1263 1.00571 37.9825M1.00571 37.9825V1.48383M1.00571 37.9825C1.00571 19.5004 1.00571 6.29016 1.00571 1.48383M1.00571 1.48383C1.00571 1.31173 1.00571 1.15041 1.00571 1C0.998193 1.15589 0.998002 1.31737 1.00571 1.48383Z"
                            stroke="#BABABA"
                        />
                        <path
                            name="icon-useful"
                            d="M42.2104 32.3027C42.6792 32.7715 43.0405 33.3525 43.2944 34.0459C43.5483 34.7393 43.6753 35.5596 43.6753 36.5068C43.6753 37.3467 43.5459 38.1206 43.2871 38.8286C43.0332 39.5317 42.6646 40.1348 42.1812 40.6377C41.6831 41.1553 41.0996 41.5459 40.4307 41.8096C39.7666 42.0684 39.0366 42.1978 38.2407 42.1978C37.5522 42.1978 36.8979 42.1318 36.2778 42C35.6577 41.8682 35.1353 41.7119 34.7104 41.5312V39.9272H34.8276C35.2231 40.2446 35.7212 40.4985 36.3218 40.689C36.9272 40.8745 37.5742 40.9673 38.2627 40.9673C38.8633 40.9673 39.4126 40.8623 39.9106 40.6523C40.4087 40.4375 40.8237 40.147 41.1558 39.7808C41.5073 39.3901 41.771 38.9507 41.9468 38.4624C42.1274 37.9692 42.2178 37.4102 42.2178 36.7852H36.2632V35.5181H42.1445C42.0762 34.937 41.9297 34.4341 41.7051 34.0093C41.4805 33.5796 41.1948 33.2256 40.8481 32.9473C40.5015 32.6689 40.1084 32.4639 39.6689 32.332C39.2295 32.1953 38.7607 32.127 38.2627 32.127C37.5938 32.127 36.9663 32.2222 36.3804 32.4126C35.7944 32.5981 35.2891 32.8545 34.8643 33.1816H34.7397V31.5703C35.1938 31.3799 35.731 31.2212 36.3511 31.0942C36.9712 30.9624 37.606 30.8965 38.2554 30.8965C39.0952 30.8965 39.8447 31.0137 40.5039 31.248C41.168 31.4824 41.7368 31.834 42.2104 32.3027ZM51.8857 35.0273H48.9268V42H47.5498V35.0273H44.5908V33.8188H51.8857V35.0273ZM60.2866 37.9131C60.2866 39.2461 59.9448 40.2983 59.2612 41.0698C58.5776 41.8413 57.6621 42.2271 56.5146 42.2271C55.3574 42.2271 54.437 41.8413 53.7534 41.0698C53.0747 40.2983 52.7354 39.2461 52.7354 37.9131C52.7354 36.5801 53.0747 35.5278 53.7534 34.7563C54.437 33.98 55.3574 33.5918 56.5146 33.5918C57.6621 33.5918 58.5776 33.98 59.2612 34.7563C59.9448 35.5278 60.2866 36.5801 60.2866 37.9131ZM58.8657 37.9131C58.8657 36.8535 58.6582 36.0674 58.2432 35.5547C57.8281 35.0371 57.252 34.7783 56.5146 34.7783C55.7676 34.7783 55.1865 35.0371 54.7715 35.5547C54.3613 36.0674 54.1562 36.8535 54.1562 37.9131C54.1562 38.9385 54.3638 39.7173 54.7788 40.2495C55.1938 40.7769 55.7725 41.0405 56.5146 41.0405C57.2471 41.0405 57.8208 40.7793 58.2358 40.2568C58.6558 39.7295 58.8657 38.9482 58.8657 37.9131ZM74.5469 42H73.1699V35.0054H69.0757V42H67.6987V33.8188H74.5469V42ZM84.2368 37.9131C84.2368 39.2461 83.895 40.2983 83.2114 41.0698C82.5278 41.8413 81.6123 42.2271 80.4648 42.2271C79.3076 42.2271 78.3872 41.8413 77.7036 41.0698C77.0249 40.2983 76.6855 39.2461 76.6855 37.9131C76.6855 36.5801 77.0249 35.5278 77.7036 34.7563C78.3872 33.98 79.3076 33.5918 80.4648 33.5918C81.6123 33.5918 82.5278 33.98 83.2114 34.7563C83.895 35.5278 84.2368 36.5801 84.2368 37.9131ZM82.8159 37.9131C82.8159 36.8535 82.6084 36.0674 82.1934 35.5547C81.7783 35.0371 81.2021 34.7783 80.4648 34.7783C79.7178 34.7783 79.1367 35.0371 78.7217 35.5547C78.3115 36.0674 78.1064 36.8535 78.1064 37.9131C78.1064 38.9385 78.314 39.7173 78.729 40.2495C79.144 40.7769 79.7227 41.0405 80.4648 41.0405C81.1973 41.0405 81.771 40.7793 82.186 40.2568C82.606 39.7295 82.8159 38.9482 82.8159 37.9131ZM92.9746 42H91.5977V34.9761H88.5435C88.5288 35.3813 88.5142 35.772 88.4995 36.1479C88.4849 36.5239 88.4702 36.8633 88.4556 37.166C88.4214 37.9814 88.3652 38.6333 88.2871 39.1216C88.209 39.605 88.1064 40.0078 87.9795 40.3301C87.8623 40.6328 87.7305 40.8794 87.584 41.0698C87.4424 41.2554 87.2886 41.4238 87.1226 41.5752C86.9565 41.7217 86.771 41.8315 86.5659 41.9048C86.3657 41.978 86.146 42.0146 85.9067 42.0146C85.8237 42.0146 85.7017 42.0122 85.5405 42.0073C85.3843 42.0024 85.2817 42 85.2329 42V40.7988H85.3062C85.3452 40.7988 85.4014 40.8013 85.4746 40.8062C85.5479 40.811 85.6089 40.8135 85.6577 40.8135C85.7749 40.8135 85.8945 40.7964 86.0166 40.7622C86.1436 40.728 86.251 40.6646 86.3389 40.5718C86.5879 40.3276 86.7881 39.915 86.9395 39.334C87.0908 38.7529 87.1909 37.9131 87.2397 36.8145C87.2593 36.4141 87.2764 35.9404 87.291 35.3936C87.3105 34.8418 87.3276 34.3169 87.3423 33.8188H92.9746V42ZM102.54 38.0522H96.5122C96.5122 38.5552 96.5879 38.9946 96.7393 39.3706C96.8906 39.7417 97.0981 40.0469 97.3618 40.2861C97.6157 40.5205 97.916 40.6963 98.2627 40.8135C98.6143 40.9307 99 40.9893 99.4199 40.9893C99.9766 40.9893 100.536 40.8794 101.097 40.6597C101.664 40.4351 102.066 40.2153 102.306 40.0005H102.379V41.502C101.915 41.6973 101.441 41.8608 100.958 41.9927C100.475 42.1245 99.9668 42.1904 99.4346 42.1904C98.0771 42.1904 97.0176 41.8242 96.2559 41.0918C95.4941 40.3545 95.1133 39.3096 95.1133 37.957C95.1133 36.6191 95.4771 35.5571 96.2046 34.771C96.937 33.9849 97.8989 33.5918 99.0903 33.5918C100.194 33.5918 101.043 33.9141 101.639 34.5586C102.24 35.2031 102.54 36.1187 102.54 37.3052V38.0522ZM101.2 36.9976C101.195 36.2749 101.012 35.7158 100.65 35.3203C100.294 34.9248 99.7495 34.7271 99.0171 34.7271C98.2798 34.7271 97.6914 34.9443 97.252 35.3789C96.8174 35.8135 96.5708 36.353 96.5122 36.9976H101.2ZM110.318 39.7075C110.318 40.1665 110.211 40.5547 109.996 40.8721C109.786 41.1895 109.515 41.4458 109.183 41.6411C108.851 41.8315 108.485 41.9707 108.084 42.0586C107.684 42.1465 107.284 42.1904 106.883 42.1904C106.317 42.1904 105.777 42.1367 105.265 42.0293C104.752 41.9219 104.247 41.7559 103.749 41.5312V40.0225H103.844C104.2 40.335 104.654 40.5767 105.206 40.7476C105.758 40.9185 106.292 41.0039 106.81 41.0039C107.054 41.0039 107.306 40.9819 107.564 40.938C107.823 40.8892 108.048 40.8135 108.238 40.7109C108.443 40.5938 108.607 40.4546 108.729 40.2935C108.851 40.1274 108.912 39.9028 108.912 39.6196C108.912 39.3267 108.851 39.0923 108.729 38.9165C108.612 38.7407 108.451 38.6089 108.246 38.521C108.045 38.4331 107.804 38.3794 107.521 38.3599C107.237 38.3403 106.979 38.3306 106.744 38.3306H105.55V37.144H106.378C106.573 37.144 106.827 37.1367 107.14 37.1221C107.457 37.1074 107.713 37.0684 107.909 37.0049C108.163 36.9219 108.363 36.8047 108.509 36.6533C108.661 36.502 108.736 36.2603 108.736 35.9282C108.736 35.6987 108.678 35.5107 108.561 35.3643C108.443 35.2129 108.297 35.0957 108.121 35.0127C107.94 34.9297 107.738 34.8735 107.513 34.8442C107.293 34.8149 107.098 34.8003 106.927 34.8003C106.429 34.8003 105.938 34.8687 105.455 35.0054C104.977 35.1372 104.574 35.3301 104.247 35.584H104.151V34.0679C104.557 33.936 104.991 33.8286 105.455 33.7456C105.919 33.6626 106.383 33.6211 106.847 33.6211C107.228 33.6211 107.606 33.6553 107.982 33.7236C108.363 33.792 108.717 33.9092 109.044 34.0752C109.366 34.2412 109.63 34.4683 109.835 34.7563C110.04 35.0396 110.143 35.3911 110.143 35.811C110.143 36.2407 110.008 36.6191 109.74 36.9463C109.476 37.2686 109.12 37.5005 108.67 37.6421V37.6934C109.173 37.8154 109.574 38.0449 109.872 38.3818C110.169 38.7139 110.318 39.1558 110.318 39.7075ZM119.342 42H117.965V38.3159H113.871V42H112.494V33.8188H113.871V37.1294H117.965V33.8188H119.342V42ZM129.032 37.9131C129.032 39.2461 128.69 40.2983 128.006 41.0698C127.323 41.8413 126.407 42.2271 125.26 42.2271C124.103 42.2271 123.182 41.8413 122.499 41.0698C121.82 40.2983 121.48 39.2461 121.48 37.9131C121.48 36.5801 121.82 35.5278 122.499 34.7563C123.182 33.98 124.103 33.5918 125.26 33.5918C126.407 33.5918 127.323 33.98 128.006 34.7563C128.69 35.5278 129.032 36.5801 129.032 37.9131ZM127.611 37.9131C127.611 36.8535 127.403 36.0674 126.988 35.5547C126.573 35.0371 125.997 34.7783 125.26 34.7783C124.513 34.7783 123.932 35.0371 123.517 35.5547C123.106 36.0674 122.901 36.8535 122.901 37.9131C122.901 38.9385 123.109 39.7173 123.524 40.2495C123.939 40.7769 124.518 41.0405 125.26 41.0405C125.992 41.0405 126.566 40.7793 126.981 40.2568C127.401 39.7295 127.611 38.9482 127.611 37.9131Z"
                            fill={newswareStates.isUseful ? 'white' : 'black'}
                        />
                    </svg>
                )}
            <div className="newsware_icon_box">
                <svg name="icon-like" className={newswareStates.activeLike ? 'newsware_icon_animation' : ''} xmlns="http://www.w3.org/2000/svg" width="25" height="22" viewBox="0 0 25 22" fill="none">
                    <path d="M7.325 1C3.83188 1 1 3.86955 1 7.40914C1 13.8183 8.475 19.6448 12.5 21C16.525 19.6448 24 13.8183 24 7.40914C24 3.86955 21.1681 1 17.675 1C15.536 1 13.6443 2.07615 12.5 3.7233C11.9168 2.88149 11.1419 2.19448 10.2411 1.72044C9.34032 1.24639 8.34005 0.999274 7.325 1Z"
                        name="icon-like"
                        fill="none"
                        stroke="black"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                    />
                </svg>
                <p className="newsware_count ">{statsCount['likes']}</p>
            </div>
            <div className={full ? 'none_active' : 'newsware_icon_box'}>
                <svg name="icon-comment" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                    <path d="M10.9992 20C12.848 20.0019 14.6672 19.5785 16.2876 18.7692L19.4607 19.5865C19.7498 19.6628 20.0562 19.6671 20.3478 19.5989C20.6393 19.5308 20.9055 19.3928 21.1184 19.1993C21.3312 19.0057 21.4831 18.7638 21.558 18.4987C21.6329 18.2337 21.6282 17.9552 21.5443 17.6923L20.6453 14.8077C21.8045 12.8858 22.2369 10.6708 21.8761 8.50366C21.5154 6.33647 20.3813 4.33707 18.6485 2.81302C16.9157 1.28897 14.6801 0.324699 12.2855 0.0685394C9.89102 -0.187621 7.47024 0.278521 5.39559 1.39526C3.32094 2.512 1.70735 4.21746 0.803037 6.24932C-0.101274 8.28117 -0.24621 10.5268 0.390521 12.6409C1.02725 14.7549 2.41038 16.6203 4.32714 17.9499C6.2439 19.2795 8.58811 19.9998 10.9992 20ZM16.1818 17.1731C16.0299 17.1752 15.8809 17.2116 15.7482 17.2788C13.7979 18.3304 11.4924 18.6985 9.26468 18.3141C7.03694 17.9297 5.04017 16.8193 3.64928 15.1913C2.2584 13.5633 1.56908 11.5297 1.71076 9.47232C1.85243 7.41497 2.81536 5.4754 4.41873 4.01779C6.0221 2.56019 8.15563 1.6848 10.4187 1.556C12.6818 1.42721 14.9187 2.05386 16.7096 3.3183C18.5004 4.58274 19.7219 6.39799 20.1447 8.42321C20.5675 10.4484 20.1626 12.5443 19.0059 14.3173C18.9482 14.4081 18.911 14.5084 18.8964 14.6124C18.8819 14.7165 18.8904 14.8221 18.9213 14.9231L19.9261 18.1154L16.4145 17.2019C16.3387 17.1829 16.2605 17.1732 16.1818 17.1731Z"
                        fill="black"
                        name="icon-comment"
                    />
                </svg>
                <p className="newsware_count ">{statsCount['comments']}</p>
            </div>
            <div className="newsware_icon_box">
                <svg name="icon-repost" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                    <path d="M20.9388 8.39037L14.7513 16.6771L14.3105 13.1041L14.2186 12.3598L13.4743 12.4516C10.2218 12.8529 7.47742 13.7428 5.19836 15.2102C3.83538 16.0877 2.65235 17.1631 1.63238 18.4433C2.07845 16.2663 2.85173 14.1619 4.05703 12.3022C5.85007 9.53564 8.62302 7.27147 12.8034 6.11119L13.4264 5.93829L13.3472 5.29667L12.9227 1.856L20.9388 8.39037Z"
                        name="icon-repost"
                        fill="white"
                        stroke="black"
                        strokeWidth="1.5"
                    />
                </svg>
                <p className="newsware_count ">{statsCount['reposts']}</p>
            </div>
            <div className="newsware_icon_box">
                <svg name="icon-flag" className={newswareStates.activeFavorite ? 'newsware_icon_animation' : ''} xmlns="http://www.w3.org/2000/svg" width="14" height="22" viewBox="0 0 14 22" fill="none">
                    <path d="M2 17.1033L7 14.6437L12 17.1033V2.28807H2V17.1033ZM1.4 19.9062C1.06667 20.0588 0.75 20.0252 0.45 19.8056C0.15 19.5867 0 19.2675 0 18.848V2.28807C0 1.65885 0.196 1.12001 0.588 0.671549C0.979333 0.22385 1.45 0 2 0H12C12.55 0 13.021 0.22385 13.413 0.671549C13.8043 1.12001 14 1.65885 14 2.28807V18.848C14 19.2675 13.85 19.5867 13.55 19.8056C13.25 20.0252 12.9333 20.0588 12.6 19.9062L7 17.1605L1.4 19.9062ZM2 2.28807H12H7H2Z"
                        name="icon-flag"
                        fill="black"
                    />
                    <path name="icon-flag" d="M2 17.1033L7 14.6437L12 17.1033V2.28807H7H2V17.1033Z" fill="none" />
                </svg>
                <p className="newsware_count ">{statsCount['favorites']}</p>
            </div>
            <div
                style={{ position: 'absolute', right: '30px', marginRight: '0px' }}
                className="newsware_icon_box">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                    <path d="M11 0.5C6 0.5 1.73 3.61 0 8C1.73 12.39 6 15.5 11 15.5C16 15.5 20.27 12.39 22 8C20.27 3.61 16 0.5 11 0.5ZM11 13C8.24 13 6 10.76 6 8C6 5.24 8.24 3 11 3C13.76 3 16 5.24 16 8C16 10.76 13.76 13 11 13ZM11 5C9.34 5 8 6.34 8 8C8 9.66 9.34 11 11 11C12.66 11 14 9.66 14 8C14 6.34 12.66 5 11 5Z" fill="#BABABA" />
                </svg>
                <p style={{ color: '#BABABA' }} className="newsware_count ">
                    {statsCount['views']}
                </p>
            </div>
            <div
                style={{ position: 'absolute', right: '60px', marginRight: '0px' }}
                className="newsware_icon_box">
                <svg xmlns="http://www.w3.org/2000/svg" width="23" height="22" viewBox="0 0 23 22" fill="none">
                    <path d="M5.93688 0.991775C6.91722 0.346186 8.114 -0.00201584 9.34375 0.000552072C9.76846 -0.00772922 10.1887 0.077273 10.5656 0.247693C10.9425 0.418113 11.2639 0.668446 11.5 0.975525C11.7361 0.668446 12.0575 0.418113 12.4344 0.247693C12.8113 0.077273 13.2315 -0.00772922 13.6562 0.000552072C14.886 -0.00201584 16.0828 0.346186 17.0631 0.991775C17.8178 1.50176 18.4 2.20799 18.6056 3.06172C19.0771 3.09297 19.5083 3.26296 19.8706 3.5192C20.4197 3.90669 20.8193 4.48793 21.0709 5.10291C21.4648 6.05913 21.5711 7.27785 21.1629 8.31532C21.2664 8.35782 21.3684 8.40782 21.4676 8.46532C21.8629 8.69406 22.1634 9.02155 22.3847 9.40779C22.8203 10.164 23 11.219 23 12.5002C23 13.9264 22.3747 14.8839 21.5812 15.4751C21.1424 15.8023 20.6246 16.0394 20.0661 16.1689C19.9223 16.8663 19.5198 17.6738 18.8888 18.3588C18.0694 19.2525 16.7986 20 15.0937 20C13.7425 20 12.6673 19.35 11.9686 18.7125C11.8016 18.5603 11.6451 18.3996 11.5 18.2313C11.3549 18.3996 11.1984 18.5603 11.0314 18.7125C10.3327 19.35 9.25894 20 7.90625 20C6.20137 20 4.93206 19.2525 4.11125 18.3588C3.52153 17.722 3.11762 16.9707 2.93394 16.1689C2.37544 16.0394 1.85761 15.8023 1.41881 15.4751C0.625312 14.8839 0 13.9252 0 12.5002C0 11.219 0.181125 10.1628 0.61525 9.40779C0.820998 9.02901 1.13719 8.70365 1.53237 8.46407C1.62946 8.40818 1.73134 8.35887 1.83713 8.31657C1.42888 7.2766 1.53525 6.05913 1.92912 5.10291C2.18069 4.48793 2.58031 3.90669 3.12944 3.5192C3.49169 3.26296 3.92294 3.09422 4.39444 3.06172C4.60144 2.20799 5.18219 1.50176 5.93688 0.991775ZM10.7812 3.12547V3.11297L10.7784 3.05047C10.7572 2.72461 10.6827 2.40304 10.557 2.09549C10.4675 1.86333 10.3152 1.65326 10.1128 1.48301C9.90049 1.32224 9.62498 1.23895 9.34375 1.25052C8.43373 1.2478 7.54751 1.50321 6.8195 1.978C6.1525 2.42923 5.75 3.04047 5.75 3.75045C5.74991 3.84943 5.72279 3.94697 5.67087 4.03505C5.61895 4.12313 5.54372 4.19923 5.45136 4.25708C5.359 4.31493 5.25216 4.35288 5.13964 4.36781C5.02711 4.38273 4.91212 4.37421 4.80412 4.34293C4.53387 4.26543 4.29238 4.30918 4.03506 4.48918C3.75331 4.68917 3.47875 5.04416 3.28181 5.5229C2.88075 6.50037 2.92244 7.68409 3.473 8.40407C3.55163 8.50661 3.59364 8.62707 3.59375 8.75031H4.67187C5.52968 8.75031 6.35236 9.04662 6.95892 9.57405C7.56549 10.1015 7.90625 10.8168 7.90625 11.5627V11.9815C8.38581 12.1289 8.78999 12.419 9.04736 12.8005C9.30473 13.182 9.39871 13.6303 9.3127 14.0662C9.22668 14.5022 8.96621 14.8976 8.57732 15.1827C8.18842 15.4678 7.69615 15.6241 7.1875 15.6241C6.67885 15.6241 6.18658 15.4678 5.79768 15.1827C5.40879 14.8976 5.14832 14.5022 5.0623 14.0662C4.97629 13.6303 5.07027 13.182 5.32764 12.8005C5.58501 12.419 5.98919 12.1289 6.46875 11.9815V11.5627C6.46875 10.7003 5.66375 10.0003 4.67187 10.0003H2.15625C2.07032 10.0002 1.98511 9.9866 1.90469 9.96028L1.90037 9.96778C1.61575 10.4615 1.4375 11.2815 1.4375 12.5002C1.4375 13.5739 1.89031 14.1789 2.35463 14.5252C2.85344 14.8976 3.40687 15.0001 3.59375 15.0001C3.78437 15.0001 3.96719 15.066 4.10198 15.1832C4.23677 15.3004 4.3125 15.4594 4.3125 15.6251C4.3125 16.0851 4.6 16.8888 5.2325 17.5788C5.84919 18.2475 6.73612 18.75 7.90625 18.75C8.71125 18.75 9.43287 18.3588 9.99062 17.8501C10.2652 17.6001 10.4794 17.3413 10.6188 17.1288C10.6823 17.0346 10.7366 16.9359 10.7812 16.8338V6.87536H9.22156C9.05201 7.29236 8.71839 7.64381 8.27965 7.8676C7.84092 8.0914 7.32533 8.17312 6.824 8.09832C6.32268 8.02353 5.8679 7.79704 5.54005 7.45888C5.2122 7.12072 5.03238 6.69267 5.03238 6.25038C5.03238 5.80809 5.2122 5.38003 5.54005 5.04188C5.8679 4.70372 6.32268 4.47723 6.824 4.40243C7.32533 4.32764 7.84092 4.40936 8.27965 4.63315C8.71839 4.85695 9.05201 5.2084 9.22156 5.6254H10.7812V3.12547ZM12.2187 15.6239V16.8326C12.2634 16.9347 12.3177 17.0333 12.3812 17.1276C12.5221 17.3401 12.7348 17.5988 13.0079 17.8488C13.5671 18.3575 14.2902 18.7488 15.0937 18.7488C16.2639 18.7488 17.1508 18.2463 17.7675 17.5776C18.4 16.8876 18.6875 16.0839 18.6875 15.6239C18.6875 15.4581 18.7632 15.2991 18.898 15.1819C19.0328 15.0647 19.2156 14.9989 19.4062 14.9989C19.5931 14.9989 20.1466 14.8964 20.6454 14.5239C21.1097 14.1777 21.5625 13.5727 21.5625 12.499C21.5625 11.2802 21.3828 10.4615 21.0996 9.96653C21.0049 9.78221 20.8562 9.62274 20.6684 9.50404C20.5065 9.41407 20.317 9.36916 20.125 9.37529C19.995 9.37523 19.8674 9.34451 19.7559 9.2864C19.6444 9.22829 19.5531 9.14497 19.4917 9.0453C19.4304 8.94564 19.4012 8.83337 19.4074 8.72045C19.4137 8.60753 19.455 8.49818 19.527 8.40407C20.079 7.68409 20.1192 6.50037 19.7182 5.5229C19.5212 5.04416 19.2467 4.68792 18.9649 4.48918C18.7076 4.30918 18.4661 4.26418 18.1959 4.34293C18.0879 4.37421 17.9729 4.38273 17.8604 4.36781C17.7478 4.35288 17.641 4.31493 17.5486 4.25708C17.4563 4.19923 17.381 4.12313 17.3291 4.03505C17.2772 3.94697 17.2501 3.84943 17.25 3.75045C17.25 3.04047 16.8475 2.42923 16.1791 1.978C15.4514 1.50347 14.5658 1.24808 13.6562 1.25052C13.375 1.23895 13.0995 1.32224 12.8872 1.48301C12.6842 1.65307 12.5313 1.86316 12.4416 2.09549C12.3047 2.42199 12.2295 2.76558 12.2187 3.11297V14.3752H13.2969C14.2887 14.3752 15.0937 13.6752 15.0937 12.8127V10.519C14.6142 10.3716 14.21 10.0815 13.9526 9.69998C13.6953 9.31849 13.6013 8.87016 13.6873 8.43424C13.7733 7.99831 14.0338 7.60287 14.4227 7.31778C14.8116 7.0327 15.3038 6.87634 15.8125 6.87634C16.3211 6.87634 16.8134 7.0327 17.2023 7.31778C17.5912 7.60287 17.8517 7.99831 17.9377 8.43424C18.0237 8.87016 17.9297 9.31849 17.6724 9.69998C17.415 10.0815 17.0108 10.3716 16.5312 10.519V12.8127C16.5312 13.5586 16.1905 14.2739 15.5839 14.8014C14.9774 15.3288 14.1547 15.6251 13.2969 15.6251H12.2187V15.6239ZM6.46875 6.25038C6.46875 6.41613 6.54448 6.5751 6.67927 6.69231C6.81406 6.80952 6.99688 6.87536 7.1875 6.87536C7.37812 6.87536 7.56094 6.80952 7.69573 6.69231C7.83052 6.5751 7.90625 6.41613 7.90625 6.25038C7.90625 6.08462 7.83052 5.92566 7.69573 5.80845C7.56094 5.69124 7.37812 5.6254 7.1875 5.6254C6.99688 5.6254 6.81406 5.69124 6.67927 5.80845C6.54448 5.92566 6.46875 6.08462 6.46875 6.25038ZM15.8125 9.37529C16.0031 9.37529 16.1859 9.30945 16.3207 9.19224C16.4555 9.07503 16.5312 8.91607 16.5312 8.75031C16.5312 8.58455 16.4555 8.42559 16.3207 8.30838C16.1859 8.19117 16.0031 8.12533 15.8125 8.12533C15.6219 8.12533 15.4391 8.19117 15.3043 8.30838C15.1695 8.42559 15.0937 8.58455 15.0937 8.75031C15.0937 8.91607 15.1695 9.07503 15.3043 9.19224C15.4391 9.30945 15.6219 9.37529 15.8125 9.37529ZM7.1875 13.1252C6.99688 13.1252 6.81406 13.191 6.67927 13.3082C6.54448 13.4254 6.46875 13.5844 6.46875 13.7502C6.46875 13.9159 6.54448 14.0749 6.67927 14.1921C6.81406 14.3093 6.99688 14.3752 7.1875 14.3752C7.37812 14.3752 7.56094 14.3093 7.69573 14.1921C7.83052 14.0749 7.90625 13.9159 7.90625 13.7502C7.90625 13.5844 7.83052 13.4254 7.69573 13.3082C7.56094 13.191 7.37812 13.1252 7.1875 13.1252Z" fill="#BABABA" />
                    <path d="M6.46875 6.25038C6.46875 6.41613 6.54448 6.5751 6.67927 6.69231C6.81406 6.80952 6.99688 6.87536 7.1875 6.87536C7.37812 6.87536 7.56094 6.80952 7.69573 6.69231C7.83052 6.5751 7.90625 6.41613 7.90625 6.25038C7.90625 6.08462 7.83052 5.92566 7.69573 5.80845C7.56094 5.69124 7.37812 5.6254 7.1875 5.6254C6.99688 5.6254 6.81406 5.69124 6.67927 5.80845C6.54448 5.92566 6.46875 6.08462 6.46875 6.25038Z" fill="#BABABA" />
                    <path d="M7.1875 13.1252C6.99688 13.1252 6.81406 13.191 6.67927 13.3082C6.54448 13.4254 6.46875 13.5844 6.46875 13.7502C6.46875 13.9159 6.54448 14.0749 6.67927 14.1921C6.81406 14.3093 6.99688 14.3752 7.1875 14.3752C7.37812 14.3752 7.56094 14.3093 7.69573 14.1921C7.83052 14.0749 7.90625 13.9159 7.90625 13.7502C7.90625 13.5844 7.83052 13.4254 7.69573 13.3082C7.56094 13.191 7.37812 13.1252 7.1875 13.1252Z" fill="#BABABA" />
                    <path d="M15.8125 9.37529C16.0031 9.37529 16.1859 9.30945 16.3207 9.19224C16.4555 9.07503 16.5312 8.91607 16.5312 8.75031C16.5312 8.58455 16.4555 8.42559 16.3207 8.30838C16.1859 8.19117 16.0031 8.12533 15.8125 8.12533C15.6219 8.12533 15.4391 8.19117 15.3043 8.30838C15.1695 8.42559 15.0937 8.58455 15.0937 8.75031C15.0937 8.91607 15.1695 9.07503 15.3043 9.19224C15.4391 9.30945 15.6219 9.37529 15.8125 9.37529Z" fill="#BABABA" />
                </svg>
                <p style={{ color: '#BABABA' }} className="newsware_count ">
                    {statsCount['useful']}
                </p>
            </div>
        </>
    )
}

//Компонент Тегов
export const Tags = ({ onClick, children }) => {
    return (
        <button
            onClick={onClick}
            className="tag">
            {children}
        </button>
    )
}